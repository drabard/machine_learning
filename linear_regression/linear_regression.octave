function ScaledX = scaleFeatures(X)
	Means = [];
	for i = 1:size(X,2)
		Means = [Means mean(X, 2)];
	endfor

	Ranges = [];
	for i = 1:size(X,2)
		Ranges = [Ranges range(X,2)];
	endfor

	ScaledX = (X - Means) ./ Ranges;
	ScaledX = [ones(1, size(ScaledX,2)); ScaledX];
endfunction

function P = reverseScaling(X, P)
	Ranges = [1; range(X, 2)];
	Means = [0; mean(X, 2)];
	P = P ./ Ranges';
	Mod = P' .* Means;
	P(1) = P(1) - sum(Mod);
endfunction

function [val, gradient] = costFunction(P, X, Y) 
	H = P*X;
	m = size(X, 2);
	Diff = H - Y;
	val = (1/2*m)*sum(Diff .* Diff);

	gradient = zeros(1, size(X, 1));
	for i = 1:size(X,1)
		gradient(i) = 1/m * sum(Diff * X(i,:)');
	endfor
endfunction

raw_data = load("input_data");
Y = raw_data(:,end)'
X = raw_data(:,1:end-1)';

ScaledX = scaleFeatures(X);

options = optimset('GradObj', 'on', 'MaxIter', 100);
initialP = ones(1, size(ScaledX,1));
[P, funcVal, exitFlag] = fminunc(@(t)(costFunction(t, ScaledX, Y)), initialP, options);

P = reverseScaling(X, P)
funcVal
exitFlag